main{

    background-color: $grayColor;
   
    width: 100%;
    height: 100%;
     border-radius: 10px;
     display: flex;
     flex-direction: column;
     overflow-y: auto;
     padding: 20px;

    //  * overflow-y:auto; verilmesinin nedeni yeterli içerik olduğunda x ekseninde kaydıramasak da y eksenin de kaydırabilecek olmamız, bir scroll olacak ve aşağıya doğru kaydırıp ineceğiz.

    // *Header

    header{

        background-color: $blackColor;
        display: flex;
        justify-content: space-between;
        padding: 20px;
        align-items: center;
        border-radius: 10px;
        gap: 20px;

        // * Form

        form{

            display: flex;
           width: 100%;
           box-shadow: 0 0 8px;

        // * Box-shadow kutu etrafında gölge oluşturur. Renk vermediğimizden otomatik olarak beyaz rengi kabul eder.

        max-width: 350px;

        border-radius: 5px;

        @media(max-width:650px){

            max-width: unset;

            // * Yukarıda ekran genişliği mixin içerisinde md olarak ayarlanan px'in altına düştüğünde ekrandaki form elemanının kaybolan nav bölümünü de kaplamasını istiyoruz. fakat bir max-width değeri atadık yukarıda, biz form'un block davranması için bunu atanan özelliğin ortadan kaldırılması gerektiğini düşünüyoruz, atanmış bir elemanın yok sayılması için unset değeri atarız, yani include md değeri için max-width:unset yaparız. fakat inceledik ve md değeri olarak atanan değerin altında form etiketinin ekranı kapladığını clonelanan çalışmada gördük,biz mixin de md'yi 768px almıştık fakat clone da ekranı kapladığı px 650 px, ondan responsive olayını burada include md yerine media(max-width:650){} yaparız.
        }

            input{

                background-color: transparent;
                padding: 15px;
                width: 100%;
                color: $textColor;


            }

            button{

                background: none;
                color: $textColor;
                cursor: pointer;
                margin-right: 10px;


            }
        }

          
        // * Nav

        nav{

            display: flex;
            gap: 15px;

            @media(max-width:650px){

                display: none;
            }

            span{

                font-size: 14px;
                cursor: pointer;
                white-space: nowrap;

                // * white-space:nowrap olduğunda ilgili elemanlar ekran küçüldüğünde aşağı atılamazlar.

                &:hover{

                    color: white;
                }
            }



        }

    }


    // * Section

    section{

        
        margin-top:20px ;
        flex: 1;

        // * flex:1 demek bütün alanı, yani section'nın boş alanın hepsini kaplamasını istemektir. o sayfada bulunan diğer elemanlara da flex:1 verilirse bütün alanı eş olarak kaplarlar.

        #list{

            margin-top: 20px;
            height: 100%;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px,1fr));

            // * repeat tekrar etsin, auto-fit otomatik kaplasın, ve min 200 px, max 1 fr olsun. demek yukarıdaki komut.

            gap: 20px;

        .card {

            background-color: #121212;
            padding: 10px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            border-radius: 10px;
            height: fit-content;

            // * fit-content kapsam alanını mümkün olduğunca doldurması için verilir.

            &:hover .play{

                opacity: 1;

                bottom: 20px;

                // * Yukarıda yapılan karta hover olunduğunda yani kartın üzerine mouse ile geldiğimizde play bottonunun görünür kılınmasıdır. &:hover'ı card'ın içerisine koyarak hover özelliğini card'da belirliyoruz, fakat .play diyerek play'deki özelliği tetikliyoruz.
            }

            figure{

                position: relative;

                img{

                    width: 100%;
                    border-radius: 10px;
                }

                .play{

                    position: absolute;
                    background-color: $greenColor;
                    width: 40px;
                    height: 40px;
                    border-radius:50%;
                    display: grid ;
                    place-items:center;
                    font-size: 23px;
                    right: 10px;
                    bottom: -20px;
                    transition: all .3s;
                    opacity: 0;

                    // * Play iconunu apsayıcısı figure elemanına göre hizalayabilmel için kapsayıcısı figure'e position: relative, eleman olan play içinse position: absolute vermeliyiz. Play butonu şarkın cartının üzerine hizalanmış bulunmaktadır. başlangıçta görünmez ama biz kartın üzerine geldiğimizde görünür, biz onu şarkının üzerine hizalamak için bu işlemleri yaptık. Kapsayıcı figure, hizalancak ise play.Bu arada absolute değeri atadıktan sonra right,left, bottom gibi elemanlarla hizalanacak konumunu belirtmeliyiz.

                    &:hover{

                        scale: 1.1;
                        rotate: 360deg;
                        background-color: #0f6d32;

                        // * Burada ise Play buttonuna hover atadık, çünkü playin scss'inin içerisindeyiz. Playin üzerine geldiğimizde scale:1.1 ile bir tık büyümesini ve rotate:360deg ile 360 derece dönmesini istiyoruz.background color ile de arka plan renk değişimini verdik.


                    }

                    i{

                        pointer-events: none;

                        // * İkonun imleç olaylarını yok et
                    }


                }
            }

            .card-info{

                
                height: 100%;
                display: flex;
                flex-direction: column;
                justify-content: space-between;
            }


        }



        }
    }


}